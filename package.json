{
  "name": "parallel-space",
  "displayName": "Parallel Space -FE Components Editor",
  "icon": "resources/icons/dark/icon.png",
  "description": "Edit component’s parts(tamplate/script/style) use multi columns layout looks like CodePen/JSFiddle/JSBin, used for Angular components, Vue TypeScript components, Vue SFC(single-file component) or other mvc/mvvm components which itself’s templates/scripts/styles parts each as standalone file or as Single-file.",
  "version": "3.0.2",
  "publisher": "ColinLuo",
  "author": "Colin Luo <mail@luozhihua.com>",
  "license": "MIT",
  "typings": [
    "src/typings"
  ],
  "engines": {
    "vscode": "^1.23.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/luozhihua/vscode-parallel-space.git"
  },
  "bugs": {
    "url": "https://github.com/luozhihua/vscode-parallel-space/issues"
  },
  "categories": [
    "Programming Languages"
  ],
  "activationEvents": [
    "onView:parallel.explorer",
    "*"
  ],
  "main": "./out/extension",
  "contributes": {
    "viewsContainers": {
      "activitybar": [{
        "id": "parallelExplorer",
        "title": "Parallel Space",
        "icon": "resources/icons/icon.svg"
      }]
    },
    "views": {
      "parallelExplorer": [{
        "id": "parallelExplorer",
        "name": "Parallel Space"
      }]
    },
    "commands": [{
        "command": "parallel.enable",
        "title": "%parallelspace.enable%",
        "category": "Parallel",
        "icon": {
          "light": "resources/icons/light/cmd-icon.png",
          "dark": "resources/icons/dark/cmd-icon.png"
        }
      },
      {
        "command": "parallel.spreadCurrentDocument",
        "title": "%parallelspace.openCurrDocUseParallelSpace%",
        "category": "Parallel",
        "icon": {
          "light": "resources/icons/light/cmd-icon.png",
          "dark": "resources/icons/dark/cmd-icon.png"
        }
      },
      {
        "command": "parallel.explorer.open",
        "title": "%parallelspace.openWithParallelSpace%",
        "category": "Parallel",
        "icon": {
          "light": "resources/icons/light/cmd-icon.png",
          "dark": "resources/icons/dark/cmd-icon.png"
        }
      },
      {
        "command": "parallel.explorer.refresh",
        "title": "%parallelspace.refresh%",
        "category": "Parallel",
        "icon": {
          "light": "resources/icons/light/cmd-icon.png",
          "dark": "resources/icons/dark/cmd-icon.png"
        }
      }
    ],
    "menus": {
      "editor/title": [{
        "command": "parallel.spreadCurrentDocument",
        "group": "navigation"
      }],
      "editor/context": [{
        "command": "parallel.spreadCurrentDocument",
        "group": "navigation"
      }],
      "explorer/context": [{
        "command": "parallel.explorer.open",
        "when": "resourceIsFile",
        "group": "navigation@100"
      }],
      "view/title": [{
        "command": "parallel.explorer.refresh",
        "when": "view == parallelExplorer",
        "group": "navigation"
      }],
      "view/item/context": [{
        "command": "parallel.explorer.open",
        "when": "view == parallelExplorer && viewItem == parallel.item.component"
      }]
    },
    "configuration": {
      "type": "object",
      "title": "Parallel Space",
      "properties": {
        "parallel.auto": {
          "type": "boolean",
          "default": true,
          "description": "Wether enable auto open file with Parallel Space.",
          "scope": "resource"
        },
        "parallel.componentFolders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "component",
            "view",
            "page"
          ],
          "description": "[Case insensitive][match 's' suffix auto] A set of folder-names or short-paths using for locate components.",
          "scope": "resource"
        },
        "parallel.scriptFolders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "script",
            "controller",
            "ctrl",
            "javascript",
            "typescript",
            "coffeescript"
          ],
          "description": "[Case insensitive][match 's' suffix auto] A set of folder-names or short-paths using for locate script files when `cross-directory mode`.",
          "scope": "resource"
        },
        "parallel.styleFolders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "style"
          ],
          "description": "[Case insensitive][match 's' suffix auto] A set of folder-names or short-paths using for locate style files when `cross-directory mode`.",
          "scope": "resource"
        },
        "parallel.templateFolders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "template",
            "tpl",
            "view",
            "page",
            "html"
          ],
          "description": "[Case insensitive][match 's' suffix auto] A set of folder-names or short-paths using for locate template files when `cross-directory mode`.",
          "scope": "resource"
        },
        "parallel.scriptExts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "[Case insensitive] A set of extnames used for detect component's script file, The extnames you setted will be merged into the built-ins and deduplicated, built-in script extnames: ['.js', '.jsx', '.ts', '.tsx', '.mjs', '.es', '.es6', '.coffee', '.dart'], use `!` symbol to exlcude a built-in extName like `['!.mjs'] or use `['!built-in']` to exclude all build-ins.",
          "scope": "resource"
        },
        "parallel.styleExts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "[Case insensitive] A set of extnames used for detect component's style file, The extnames you setted will be merged into the built-ins and deduplicated, built-in style extnames: ['.css', '.scss', '.sass', '.less', '.styl', '.stylus'], use `!` symbol to exlcude a built-in extName like `['!.css'] or use `['!built-in']` to exclude all build-ins.",
          "scope": "resource"
        },
        "parallel.templateExts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "[Case insensitive] A set of extnames used for detect component's template file, The extnames you setted will be merged into the built-ins and deduplicated, built-in template extnames: ['.jade', '.pug', '.tpl', '.html', '.htm', '.xhtml', '.xml', '.mustache', '.ejs', '.def', '.dot', '.jst', '.handlebars', '.hbs', '.haml', '.dust', '.njk'], use `!` symbol to exlcude a built-in extName like `['!.xml'] or use `['!built-in']` to exclude all build-ins.",
          "scope": "resource"
        },
        "parallel.columnsOrder": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "script",
            "template",
            "style"
          ],
          "description": "Enable and adjust script, template, style panels’s layout order in the editor.",
          "scope": "resource"
        },
        "parallel.splitSingleFileComponentOnEditing": {
          "type": "boolean",
          "default": true,
          "description": "whether auto split templates/scripts/style tags in multiple columns view for a single-file component when open it.",
          "scope": "resource"
        },
        "parallel.singleFileComponentExts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            ".vue",
            ".we",
            ".weex"
          ],
          "description": "[Case insensitive] A set of file extnames used for Single-file Component to enable split mode.",
          "scope": "resource"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "npm run compile && node ./node_modules/vscode/bin/test"
  },
  "devDependencies": {
    "@types/commondir": "^1.0.2",
    "@types/jsdom": "^11.0.6",
    "@types/klaw-sync": "^2.0.1",
    "@types/lodash": "^4.14.108",
    "@types/micromatch": "^3.1.0",
    "@types/mkdirp": "^0.5.2",
    "@types/mocha": "^5.2.0",
    "@types/node": "^10.0.6",
    "@types/rimraf": "^2.0.2",
    "tslint": "^5.9.1",
    "typescript": "^2.8.3",
    "vscode": "^1.1.16",
    "vscode-nls-dev": "^3.0.9"
  },
  "dependencies": {
    "commondir": "^1.0.1",
    "jsdom": "^11.8.0",
    "jsonc-parser": "^2.0.0",
    "klaw-sync": "^3.0.2",
    "lodash": "^4.17.10",
    "micromatch": "^3.1.10",
    "mkdirp": "^0.5.1",
    "rimraf": "^2.6.2",
    "vscode-nls": "^3.2.2"
  }
}
