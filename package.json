{
  "name": "parallel-editor",
  "displayName": "Parallel Components Editor",
  "icon": "icon.png",
  "description":
    "Edit component’s parts(tamplate/script/style) use multi columns layout looks like CodePen/JSFiddle/JSBin, used for Angular components, Vue TypeScript components, Vue SFC(single-file component) or other mvc/mvvm components which itself’s templates/scripts/styles parts each as standalone file or as Single-file.",
  "version": "2.0.0",
  "publisher": "ColinLuo",
  "author": "Colin Luo <mail@luozhihua.com>",
  "license": "MIT",
  "engines": {
    "vscode": "^1.22.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/luozhihua/vscode-parallel-components-editor.git"
  },
  "bugs": {
    "url":
      "https://github.com/luozhihua/vscode-parallel-components-editor/issues"
  },
  "categories": ["Programming Languages", "Formatters"],
  "activationEvents": ["*"],
  "main": "./out/extension",
  "typings": "src/typings/index.d.ts",
  "contributes": {
    "commands": [
      {
        "command": "parallel.enableForCurrentDocument",
        "title": "Enable Parallel for activated document.",
        "category": "Parallel",
        "icon": {
          "light": "resources/icons/light/icon.png",
          "dark": "resources/icons/dark/icon.png"
        }
      }
    ],
    "menus": {
      "editor/title": [
        {
          "command": "parallel.enableForCurrentDocument",
          "when": "config.parallel.enabled",
          "group": "navigation"
        }
      ],
      "editor/context": [
        {
          "command": "parallel.enableForCurrentDocument",
          "when": "config.parallel.enabled",
          "group": "navigation"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "Parallel Editor",
      "properties": {
        "parallel.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Wether enable Parallel Components Editor.",
          "scope": "resource"
        },
        "parallel.componentFolders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description":
            "[Case insensitive] A set of folder-names or short-paths using for locate components. Parallel built-ins: ['component[s]', 'view[s]', 'page[s]']",
          "scope": "resource"
        },
        "parallel.scriptFolders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description":
            "[Case insensitive] A set of folder-names or short-paths using for locate script files when `cross-directory mode`. Parallel built-ins: ['script[s]', 'controller[s]', 'ctrl[s]',  'javascript[s]', 'typescript[s]', 'coffeescript[s]', ...scriptsExtNames]",
          "scope": "resource"
        },
        "parallel.styleFolders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description":
            "[Case insensitive] A set of folder-names or short-paths using for locate style files when `cross-directory mode`. Parallel built-ins: ['style[s]', ...styleExtNames]",
          "scope": "resource"
        },
        "parallel.templateFolders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description":
            "[Case insensitive] A set of folder-names or short-paths using for locate template files when `cross-directory mode`. Parallel built-ins: ['template[s]', 'tpl[s]', 'view[s]', 'page[s]', ['html[s]'], ...tempalteExtNames]",
          "scope": "resource"
        },
        "parallel.scriptExts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description":
            "[Case insensitive] A set of extnames used for detect component's script file, The extnames you setted will be merged into the built-ins and deduplicated, built-in script extnames: ['.js', '.jsx', '.ts', '.tsx', '.mjs', '.es', '.es6', '.coffee', '.dart'], use `!` symbol to exlcude a built-in extName like `['!.mjs'] or use `['!built-in']` to exclude all build-ins.",
          "scope": "resource"
        },
        "parallel.styleExts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description":
            "[Case insensitive] A set of extnames used for detect component's style file, The extnames you setted will be merged into the built-ins and deduplicated, built-in style extnames: ['.css', '.scss', '.sass', '.less', '.styl', '.stylus'], use `!` symbol to exlcude a built-in extName like `['!.css'] or use `['!built-in']` to exclude all build-ins.",
          "scope": "resource"
        },
        "parallel.templateExts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description":
            "[Case insensitive] A set of extnames used for detect component's template file, The extnames you setted will be merged into the built-ins and deduplicated, built-in template extnames: ['.jade', '.pug', '.tpl', '.html', '.htm', '.xhtml', '.xml', '.mustache', '.ejs', '.def', '.dot', '.jst', '.handlebars', '.hbs', '.haml', '.dust', '.njk'], use `!` symbol to exlcude a built-in extName like `['!.xml'] or use `['!built-in']` to exclude all build-ins.",
          "scope": "resource"
        },
        "parallel.columnsOrder": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": ["script", "template", "style"],
          "description":
            "Enable and adjust script, template, style panels’s layout order in the editor.",
          "scope": "resource"
        },
        "parallel.splitSingleFileComponentOnEditing": {
          "type": "boolean",
          "default": true,
          "description":
            "whether auto split templates/scripts/style tags in multiple columns view for a single-file component when open it.",
          "scope": "resource"
        },
        "parallel.singleFileComponentExts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description":
            "[Case insensitive] A set of file extnames used for Single-file Component to enable split mode. built-in extnames: ['.vue', '.we', '.weex'].",
          "scope": "resource"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "npm run compile && node ./node_modules/vscode/bin/test"
  },
  "devDependencies": {
    "@types/commondir": "^1.0.2",
    "@types/jsdom": "^11.0.6",
    "@types/klaw-sync": "^2.0.1",
    "@types/lodash": "^4.14.107",
    "@types/micromatch": "^3.1.0",
    "@types/mkdirp": "^0.5.2",
    "@types/mocha": "^5.2.0",
    "@types/node": "^9.6.6",
    "tslint": "^5.9.1",
    "typescript": "^2.8.3",
    "vscode": "^1.1.14"
  },
  "dependencies": {
    "commondir": "^1.0.1",
    "jsdom": "^11.8.0",
    "klaw-sync": "^3.0.2",
    "lodash": "^4.17.5",
    "micromatch": "^3.1.10",
    "mkdirp": "^0.5.1"
  }
}
